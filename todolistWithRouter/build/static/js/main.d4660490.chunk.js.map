{"version":3,"sources":["NewTask.js","TodoList.js","actions/username.js","actions/tasks.js","Welcome.js","App.js","serviceWorker.js","reducers/username.js","reducers/tasks.js","index.js"],"names":["NewTask","props","state","data","this","delayMe","setTimeout","setState","taskValue","addTask","handleClick","type","value","onChange","onClick","React","Component","connect","username","tasks","dispatch","changeName","newName","onTaskClick","taskId","changeTask","onAddTaskClick","taskName","history","useHistory","useState","newTask","setNewTask","tempUsername","setTempUsername","itemsTasks","map","task","i","key","checked","done","id","name","event","target","push","Welcome","App","to","path","exact","component","TodoList","Boolean","window","location","hostname","match","initialState","action","newState","reducerTasks","stateCopy","forEach","todo","stateCopy2","length","store","createStore","combineReducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4660490.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nclass NewTask extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data:''\n        }\n    }\n    componentDidMount(){\n        this.delayMe();\n    }\n    delayMe(){\n        setTimeout(()=>{\n            this.setState({data: 'data du serveur'});\n        }, 2000);\n    }\n    render() {\n        const {taskValue, addTask, handleClick} = this.props;\n       \n        return(\n        <Fragment>   \n            <label> New Task:      \n                <input type=\"text\" value={taskValue} onChange={addTask} />\n            </label>\n            <button onClick={handleClick} >Validate</button>\n       </Fragment>);\n    }\n}\n\n\nexport default NewTask;","import React, { Fragment, useState } from 'react';\nimport { connect } from 'react-redux';\nimport NewTask from './NewTask';\nimport { changeName } from './actions/username';\nimport { addTask, changeTask } from './actions/tasks';\nimport { useHistory } from 'react-router-dom';\n\nfunction TodoList(props) {\n    const history = useHistory();\n    const [newTask, setNewTask] = useState('');\n    const [tempUsername, setTempUsername] = useState(props.username);\n\n    function addTask(event) {\n        setNewTask(event.target.value);\n    }\n\n    function handleClick() {\n        props.onAddTaskClick(newTask);\n        setNewTask('');\n        history.push('/');\n    }\n\n    const itemsTasks = props.tasks.map((task, i) => {\n        return (<li key={i}>\n            <input type=\"checkbox\" checked={task.done}\n                onChange={() => props.onTaskClick(task.id)}\n            />\n            {task.name}</li>)\n    });\n\n    function handleInputNameChange(event) {\n        setTempUsername(event.target.value);\n    }\n\n    function handleSubmitName() {\n        props.changeName(tempUsername);\n    }\n\n    return (\n        <Fragment>\n            <h3>Salut {props.username}</h3>\n            <ul>{itemsTasks}</ul>\n            <NewTask addTask={addTask} taskValue={newTask}\n                handleClick={handleClick} />\n            <input type=\"text\" name=\"username\" value={tempUsername} onChange={handleInputNameChange} />\n            <button onClick={handleSubmitName}> Changer de nom </button>\n        </Fragment>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        username: state.username.username,\n        tasks: state.tasks\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeName: (newName) => {\n            dispatch(changeName(newName));\n        },\n        onTaskClick: (taskId) => dispatch(changeTask(taskId)),\n        onAddTaskClick: (taskName) => dispatch(addTask(taskName))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","export const changeName = (newName)=>{\n    return {type: \"CHANGE_NAME\", newName}\n}","export const changeTask = (taskId)=>{\n    return {type: \"CHANGE_TASK\", taskId}\n}\n\nexport const addTask = (taskName)=>{\n    return {type: \"ADD_TASK\", taskName}\n}\n","import React from 'react';\n\nconst Welcome = ()=>{\n    return (<h3>Welcome :)</h3>);\n}\nexport default Welcome;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Link, Route} from 'react-router-dom';\nimport TodoList from './TodoList';\nimport Welcome from './Welcome';\n\nfunction App() {\n    return (\n        <Router>\n            <Link to=\"/todos\">Go to my todos!</Link>\n            <Route path=\"/\" exact component={Welcome}></Route>\n            <Route path=\"/todos\" component={TodoList}></Route>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {username: 'blandine'}\n\nconst username = (state = initialState, action)=>{\n    switch (action.type) {\n      case 'CHANGE_NAME':\n        if(state.username !== action.newName){\n          const newState = {...state};\n          newState.username = action.newName;\n          return newState;\n        }\n        return state;\n      default: {\n        return state;\n      }\n    }\n  }\n  export default username;","const initialState = [\n    { id: 1, done: false, name: 'Learn ReactJS' },\n    { id: 2, done: true, name: 'Learn css' },\n    { id: 3, done: false, name: 'Web development' }];\n\n\nfunction reducerTasks(state = initialState, action) {\n    switch (action.type) {\n        case 'CHANGE_TASK':\n            const stateCopy = [...state];\n\n            stateCopy.forEach((todo) => {\n                if (todo.id === action.taskId) {\n                    todo.done = !todo.done;\n                }\n            });\n\n            return stateCopy;\n        case 'ADD_TASK':\n            const stateCopy2 = [...state];\n            const value = { id: stateCopy2.length + 1, done: false, name: action.taskName };\n            stateCopy2.push(value);\n            return stateCopy2;\n\n        default:\n            return state;\n    }\n\n}\n\nexport default reducerTasks;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers} from 'redux';\nimport username from './reducers/username';\nimport tasks from './reducers/tasks';\n\nconst store = createStore(combineReducers({username, tasks}), \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}